name: Deploy Gym Reservation System

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Removed daily schedule - only run on push/PR
  # schedule:
  #   # Run health check daily at 12:00 PM UTC
  #   - cron: '0 12 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run syntax check
      run: |
        python -m py_compile gym_reservation_cloud.py
    
    - name: Run basic tests
      run: |
        python -c "
        import os
        os.environ['CONDOMISOFT_USERNAME'] = 'test@example.com'
        os.environ['CONDOMISOFT_PASSWORD'] = 'testpass'
        os.environ['EMAIL_USER'] = 'test@example.com'
        os.environ['EMAIL_PASSWORD'] = 'testpass'
        os.environ['EMAIL_TO'] = 'test@example.com'
        
        from gym_reservation_cloud import GymReservationCloud
        print('‚úÖ Import successful')
        
        # Test date calculation
        reservation = GymReservationCloud()
        target_date = reservation.get_target_date()
        print(f'‚úÖ Target date calculation: {target_date}')
        "

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t gym-reservation:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm -e CONDOMISOFT_USERNAME=test@example.com \
                         -e CONDOMISOFT_PASSWORD=testpass \
                         -e EMAIL_USER=test@example.com \
                         -e EMAIL_PASSWORD=testpass \
                         -e EMAIL_TO=test@example.com \
                         gym-reservation:latest python -c "print('‚úÖ Docker image working')"

  deploy-railway:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Railway
      run: |
        echo "üöÄ Deploying to Railway..."
        # Railway deployment happens automatically when code is pushed
        # This is just for logging purposes
        echo "‚úÖ Railway deployment triggered"

  health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Health Check Notification
      run: |
        echo "üè• Running scheduled health check..."
        # This could be extended to actually test the deployed service
        # For now, it's just a placeholder for monitoring
        echo "‚úÖ Health check completed" 